// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddBookInput struct {
	Title       string       `json:"title"`
	Author      string       `json:"author"`
	Category    BookCategory `json:"category"`
	Description string       `json:"description"`
	Isbn        string       `json:"isbn"`
	CoverImage  string       `json:"coverImage"`
}

type Admin struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

type AdminDashboard struct {
	TotalBooks  *int         `json:"totalBooks,omitempty"`
	TotalUsers  *int         `json:"totalUsers,omitempty"`
	BorrowStats *BorrowStats `json:"borrowStats,omitempty"`
}

type AdminInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Book struct {
	ID           string           `json:"id"`
	Title        string           `json:"title"`
	Author       string           `json:"author"`
	Category     BookCategory     `json:"category"`
	Description  string           `json:"description"`
	Isbn         string           `json:"isbn"`
	CoverImage   string           `json:"coverImage"`
	Availability BookAvailability `json:"availability"`
	Rating       float64          `json:"rating"`
	Reviews      []*Review        `json:"reviews,omitempty"`
}

type BookHistory struct {
	Book         *Book   `json:"book,omitempty"`
	BorrowedDate *string `json:"borrowedDate,omitempty"`
	ReturnedDate *string `json:"returnedDate,omitempty"`
}

type Bookmark struct {
	Book *Book `json:"book"`
	Page int   `json:"page"`
}

type BorrowReceipt struct {
	Book    *Book  `json:"book"`
	DueDate string `json:"dueDate"`
}

type BorrowStats struct {
	Daily   *int `json:"daily,omitempty"`
	Weekly  *int `json:"weekly,omitempty"`
	Monthly *int `json:"monthly,omitempty"`
}

type DateRangeInput struct {
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
}

type Discussion struct {
	ID        string             `json:"id"`
	Title     string             `json:"title"`
	Category  string             `json:"category"`
	Replies   []*DiscussionReply `json:"replies,omitempty"`
	CreatedAt *string            `json:"createdAt,omitempty"`
	CreatedBy *User              `json:"createdBy"`
}

type DiscussionInput struct {
	Title    string `json:"title"`
	Category string `json:"category"`
	Content  string `json:"content"`
}

type DiscussionReply struct {
	ID        string  `json:"id"`
	Content   string  `json:"content"`
	CreatedAt *string `json:"createdAt,omitempty"`
	CreatedBy *User   `json:"createdBy"`
}

type EditBookInput struct {
	Title       *string       `json:"title,omitempty"`
	Author      *string       `json:"author,omitempty"`
	Category    *BookCategory `json:"category,omitempty"`
	Description *string       `json:"description,omitempty"`
	Isbn        *string       `json:"isbn,omitempty"`
	CoverImage  *string       `json:"coverImage,omitempty"`
}

type Library struct {
	BorrowedBooks  []*Book `json:"borrowedBooks,omitempty"`
	ReservedBooks  []*Book `json:"reservedBooks,omitempty"`
	PurchasedBooks []*Book `json:"purchasedBooks,omitempty"`
	FavoriteBooks  []*Book `json:"favoriteBooks,omitempty"`
}

type Mutation struct {
}

type Notification struct {
	ID        string  `json:"id"`
	Type      string  `json:"type"`
	Message   string  `json:"message"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Read      *bool   `json:"read,omitempty"`
}

type NotificationSettings struct {
	DueDateReminders  *bool `json:"dueDateReminders,omitempty"`
	NewArrivals       *bool `json:"newArrivals,omitempty"`
	CommunityActivity *bool `json:"communityActivity,omitempty"`
}

type NotificationSettingsInput struct {
	DueDateReminders  *bool `json:"dueDateReminders,omitempty"`
	NewArrivals       *bool `json:"newArrivals,omitempty"`
	CommunityActivity *bool `json:"communityActivity,omitempty"`
}

type PaymentDetails struct {
	Method        string `json:"method"`
	TransactionID string `json:"transactionId"`
}

type PaymentInput struct {
	Method     string  `json:"method"`
	CardNumber *string `json:"cardNumber,omitempty"`
	ExpiryDate *string `json:"expiryDate,omitempty"`
	Cvv        *string `json:"cvv,omitempty"`
}

type PurchaseReceipt struct {
	Book           *Book           `json:"book"`
	Price          float64         `json:"price"`
	PaymentDetails *PaymentDetails `json:"paymentDetails"`
}

type Query struct {
}

type Report struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	GeneratedAt string `json:"generatedAt"`
	Data        string `json:"data"`
}

type ReportFilterInput struct {
	DateRange    *DateRangeInput `json:"dateRange,omitempty"`
	Category     *BookCategory   `json:"category,omitempty"`
	UserActivity *string         `json:"userActivity,omitempty"`
}

type ReserveReceipt struct {
	Book            *Book  `json:"book"`
	ReservationDate string `json:"reservationDate"`
}

type Review struct {
	ID        string  `json:"id"`
	User      *User   `json:"user"`
	Book      *Book   `json:"book"`
	Rating    float64 `json:"rating"`
	Content   *string `json:"content,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
}

type ReviewInput struct {
	Rating  float64 `json:"rating"`
	Content *string `json:"content,omitempty"`
}

type SignUpInput struct {
	Name           string          `json:"name"`
	Email          string          `json:"email"`
	Password       string          `json:"password"`
	FavoriteGenres []*BookCategory `json:"favoriteGenres,omitempty"`
}

type UpdateProfileInput struct {
	Name           *string         `json:"name,omitempty"`
	Email          *string         `json:"email,omitempty"`
	FavoriteGenres []*BookCategory `json:"favoriteGenres,omitempty"`
}

type User struct {
	ID             string             `json:"id"`
	Name           string             `json:"name"`
	Email          string             `json:"email"`
	Password       string             `json:"password"`
	FavoriteGenres []*BookCategory    `json:"favoriteGenres,omitempty"`
	ActivityStats  *UserActivityStats `json:"activityStats,omitempty"`
	Role           UserRole           `json:"role"`
}

type UserActivityStats struct {
	BooksBorrowed  *int `json:"booksBorrowed,omitempty"`
	ReviewsWritten *int `json:"reviewsWritten,omitempty"`
}

type UserProfile struct {
	User           *User              `json:"user"`
	FavoriteGenres []*BookCategory    `json:"favoriteGenres,omitempty"`
	ActivityStats  *UserActivityStats `json:"activityStats,omitempty"`
}

type BookAvailability string

const (
	BookAvailabilityAvailable BookAvailability = "AVAILABLE"
	BookAvailabilityReserved  BookAvailability = "RESERVED"
	BookAvailabilityBorrowed  BookAvailability = "BORROWED"
	BookAvailabilitySoldOut   BookAvailability = "SOLD_OUT"
)

var AllBookAvailability = []BookAvailability{
	BookAvailabilityAvailable,
	BookAvailabilityReserved,
	BookAvailabilityBorrowed,
	BookAvailabilitySoldOut,
}

func (e BookAvailability) IsValid() bool {
	switch e {
	case BookAvailabilityAvailable, BookAvailabilityReserved, BookAvailabilityBorrowed, BookAvailabilitySoldOut:
		return true
	}
	return false
}

func (e BookAvailability) String() string {
	return string(e)
}

func (e *BookAvailability) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookAvailability(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookAvailability", str)
	}
	return nil
}

func (e BookAvailability) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BookCategory string

const (
	BookCategoryFiction        BookCategory = "FICTION"
	BookCategoryNonFiction     BookCategory = "NON_FICTION"
	BookCategoryScienceFiction BookCategory = "SCIENCE_FICTION"
	BookCategoryFantasy        BookCategory = "FANTASY"
	BookCategoryMystery        BookCategory = "MYSTERY"
	BookCategoryRomance        BookCategory = "ROMANCE"
	BookCategoryThriller       BookCategory = "THRILLER"
	BookCategoryBiography      BookCategory = "BIOGRAPHY"
	BookCategoryHistory        BookCategory = "HISTORY"
	BookCategoryScience        BookCategory = "SCIENCE"
	BookCategorySelfHelp       BookCategory = "SELF_HELP"
	BookCategoryChildren       BookCategory = "CHILDREN"
)

var AllBookCategory = []BookCategory{
	BookCategoryFiction,
	BookCategoryNonFiction,
	BookCategoryScienceFiction,
	BookCategoryFantasy,
	BookCategoryMystery,
	BookCategoryRomance,
	BookCategoryThriller,
	BookCategoryBiography,
	BookCategoryHistory,
	BookCategoryScience,
	BookCategorySelfHelp,
	BookCategoryChildren,
}

func (e BookCategory) IsValid() bool {
	switch e {
	case BookCategoryFiction, BookCategoryNonFiction, BookCategoryScienceFiction, BookCategoryFantasy, BookCategoryMystery, BookCategoryRomance, BookCategoryThriller, BookCategoryBiography, BookCategoryHistory, BookCategoryScience, BookCategorySelfHelp, BookCategoryChildren:
		return true
	}
	return false
}

func (e BookCategory) String() string {
	return string(e)
}

func (e *BookCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookCategory", str)
	}
	return nil
}

func (e BookCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleReader UserRole = "READER"
	UserRoleAdmin  UserRole = "ADMIN"
)

var AllUserRole = []UserRole{
	UserRoleReader,
	UserRoleAdmin,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleReader, UserRoleAdmin:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
