// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

)

type Author struct {
	ID          string   `json:"_id"`
	Name        string   `json:"name"`
	Biography   *string  `json:"biography,omitempty"`
	BirthDate   *string  `json:"birthDate,omitempty"`
	Nationality *string  `json:"nationality,omitempty"`
	Books       []*Book  `json:"books,omitempty"`
	Awards      []string `json:"awards,omitempty"`
	WebsiteURL  *string  `json:"websiteURL,omitempty"`
}

type AuthorInput struct {
	Name        string   `json:"name"`
	Biography   *string  `json:"biography,omitempty"`
	BirthDate   *string  `json:"birthDate,omitempty"`
	Nationality *string  `json:"nationality,omitempty"`
	Awards      []string `json:"awards,omitempty"`
	WebsiteURL  *string  `json:"websiteURL,omitempty"`
}

type AuthorUpdateInput struct {
	Name        *string  `json:"name,omitempty"`
	Biography   *string  `json:"biography,omitempty"`
	BirthDate   *string  `json:"birthDate,omitempty"`
	Nationality *string  `json:"nationality,omitempty"`
	Awards      []string `json:"awards,omitempty"`
	WebsiteURL  *string  `json:"websiteURL,omitempty"`
}

type Book struct {
	ID                 string        `json:"_id"`
	Isbn               *string       `json:"isbn,omitempty"`
	Title              string        `json:"title"`
	Description        *string       `json:"description,omitempty"`
	PublishedYear      *int          `json:"publishedYear,omitempty"`
	PageCount          *int          `json:"pageCount,omitempty"`
	Language           *string       `json:"language,omitempty"`
	Category           *BookCategory `json:"category,omitempty"`
	Status             *BookStatus   `json:"status,omitempty"`
	Authors            []*Author     `json:"authors"`
	Publisher          *Publisher    `json:"publisher,omitempty"`
	Price              *float64      `json:"price,omitempty"`
	DiscountPercentage *float64      `json:"discountPercentage,omitempty"`
	TotalCopies        *int          `json:"totalCopies,omitempty"`
	AvailableCopies    *int          `json:"availableCopies,omitempty"`
	CoverImageURL      *string       `json:"coverImageURL,omitempty"`
	Tags               []string      `json:"tags,omitempty"`
	AverageRating      *float64      `json:"averageRating,omitempty"`
	TotalRatings       *int          `json:"totalRatings,omitempty"`
}

type BookBorrow struct {
	ID         string       `json:"_id"`
	Book       *Book        `json:"book"`
	User       *User        `json:"user"`
	BorrowDate string       `json:"borrowDate"`
	DueDate    string       `json:"dueDate"`
	ReturnDate *string      `json:"returnDate,omitempty"`
	Status     BorrowStatus `json:"status"`
}

type BookBorrowUpdateInput struct {
	DueDate    *string       `json:"dueDate,omitempty"`
	ReturnDate *string       `json:"returnDate,omitempty"`
	Status     *BorrowStatus `json:"status,omitempty"`
}

type BookInput struct {
	Title              string        `json:"title"`
	Isbn               *string       `json:"isbn,omitempty"`
	Description        *string       `json:"description,omitempty"`
	PublishedYear      *int          `json:"publishedYear,omitempty"`
	PageCount          *int          `json:"pageCount,omitempty"`
	Language           *string       `json:"language,omitempty"`
	Category           *BookCategory `json:"category,omitempty"`
	AuthorIds          []string      `json:"authorIds,omitempty"`
	PublisherID        *string       `json:"publisherId,omitempty"`
	Price              *float64      `json:"price,omitempty"`
	DiscountPercentage *float64      `json:"discountPercentage,omitempty"`
	TotalCopies        *int          `json:"totalCopies,omitempty"`
	CoverImageURL      *string       `json:"coverImageURL,omitempty"`
	Tags               []string      `json:"tags,omitempty"`
}

type BookUpdateInput struct {
	Title              *string       `json:"title,omitempty"`
	Isbn               *string       `json:"isbn,omitempty"`
	Description        *string       `json:"description,omitempty"`
	PublishedYear      *int          `json:"publishedYear,omitempty"`
	PageCount          *int          `json:"pageCount,omitempty"`
	Language           *string       `json:"language,omitempty"`
	Category           *BookCategory `json:"category,omitempty"`
	Status             *BookStatus   `json:"status,omitempty"`
	AuthorIds          []string      `json:"authorIds,omitempty"`
	PublisherID        *string       `json:"publisherId,omitempty"`
	Price              *float64      `json:"price,omitempty"`
	DiscountPercentage *float64      `json:"discountPercentage,omitempty"`
	TotalCopies        *int          `json:"totalCopies,omitempty"`
	CoverImageURL      *string       `json:"coverImageURL,omitempty"`
	Tags               []string      `json:"tags,omitempty"`
}

type Mutation struct {
}

type Publisher struct {
	ID          string  `json:"_id"`
	Name        string  `json:"name"`
	FoundedYear *int    `json:"foundedYear,omitempty"`
	Location    *string `json:"location,omitempty"`
	Books       []*Book `json:"books,omitempty"`
	WebsiteURL  *string `json:"websiteURL,omitempty"`
}

type PublisherInput struct {
	Name        string  `json:"name"`
	FoundedYear *int    `json:"foundedYear,omitempty"`
	Location    *string `json:"location,omitempty"`
	WebsiteURL  *string `json:"websiteURL,omitempty"`
}

type PublisherUpdateInput struct {
	Name        *string `json:"name,omitempty"`
	FoundedYear *int    `json:"foundedYear,omitempty"`
	Location    *string `json:"location,omitempty"`
	WebsiteURL  *string `json:"websiteURL,omitempty"`
}

type Query struct {
}

type Review struct {
	ID         string  `json:"_id"`
	Book       *Book   `json:"book"`
	User       *User   `json:"user"`
	Rating     int     `json:"rating"`
	ReviewText *string `json:"reviewText,omitempty"`
	ReviewDate string  `json:"reviewDate"`
}

type ReviewInput struct {
	BookID     string  `json:"bookId"`
	UserID     string  `json:"userID"`
	Rating     int     `json:"rating"`
	ReviewText *string `json:"reviewText,omitempty"`
}

type ReviewUpdateInput struct {
	Rating     *int    `json:"rating,omitempty"`
	ReviewText *string `json:"reviewText,omitempty"`
}

type User struct {
	ID               string        `json:"_id"`
	Username         string        `json:"username"`
	Email            string        `json:"email"`
	FullName         *string       `json:"fullName,omitempty"`
	RegistrationDate string        `json:"registrationDate"`
	Role             UserRole      `json:"role"`
	Reviews          []*Review     `json:"reviews,omitempty"`
	BorrowedBooks    []*BookBorrow `json:"borrowedBooks,omitempty"`
	HashedPassword   string        `json:"-"`
}

type UserUpdateInput struct {
	Username        *string   `json:"username,omitempty"`
	Email           *string   `json:"email,omitempty"`
	FullName        *string   `json:"fullName,omitempty"`
	CurrentPassword *string   `json:"currentPassword,omitempty"`
	NewPassword     *string   `json:"newPassword,omitempty"`
	Role            *UserRole `json:"role,omitempty"`
}

type BookCategory string

const (
	BookCategoryFiction        BookCategory = "FICTION"
	BookCategoryNonFiction     BookCategory = "NON_FICTION"
	BookCategoryScienceFiction BookCategory = "SCIENCE_FICTION"
	BookCategoryFantasy        BookCategory = "FANTASY"
	BookCategoryMystery        BookCategory = "MYSTERY"
	BookCategoryRomance        BookCategory = "ROMANCE"
	BookCategoryThriller       BookCategory = "THRILLER"
	BookCategoryBiography      BookCategory = "BIOGRAPHY"
	BookCategoryHistory        BookCategory = "HISTORY"
	BookCategoryScience        BookCategory = "SCIENCE"
	BookCategorySelfHelp       BookCategory = "SELF_HELP"
	BookCategoryChildren       BookCategory = "CHILDREN"
)

var AllBookCategory = []BookCategory{
	BookCategoryFiction,
	BookCategoryNonFiction,
	BookCategoryScienceFiction,
	BookCategoryFantasy,
	BookCategoryMystery,
	BookCategoryRomance,
	BookCategoryThriller,
	BookCategoryBiography,
	BookCategoryHistory,
	BookCategoryScience,
	BookCategorySelfHelp,
	BookCategoryChildren,
}

func (e BookCategory) IsValid() bool {
	switch e {
	case BookCategoryFiction, BookCategoryNonFiction, BookCategoryScienceFiction, BookCategoryFantasy, BookCategoryMystery, BookCategoryRomance, BookCategoryThriller, BookCategoryBiography, BookCategoryHistory, BookCategoryScience, BookCategorySelfHelp, BookCategoryChildren:
		return true
	}
	return false
}

func (e BookCategory) String() string {
	return string(e)
}

func (e *BookCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookCategory", str)
	}
	return nil
}

func (e BookCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BookStatus string

const (
	BookStatusAvailable  BookStatus = "AVAILABLE"
	BookStatusCheckedOut BookStatus = "CHECKED_OUT"
	BookStatusOutOfPrint BookStatus = "OUT_OF_PRINT"
	BookStatusLost       BookStatus = "LOST"
	BookStatusInRepair   BookStatus = "IN_REPAIR"
)

var AllBookStatus = []BookStatus{
	BookStatusAvailable,
	BookStatusCheckedOut,
	BookStatusOutOfPrint,
	BookStatusLost,
	BookStatusInRepair,
}

func (e BookStatus) IsValid() bool {
	switch e {
	case BookStatusAvailable, BookStatusCheckedOut, BookStatusOutOfPrint, BookStatusLost, BookStatusInRepair:
		return true
	}
	return false
}

func (e BookStatus) String() string {
	return string(e)
}

func (e *BookStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookStatus", str)
	}
	return nil
}

func (e BookStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BorrowStatus string

const (
	BorrowStatusBorrowed BorrowStatus = "BORROWED"
	BorrowStatusReturned BorrowStatus = "RETURNED"
	BorrowStatusOverdue  BorrowStatus = "OVERDUE"
	BorrowStatusLost     BorrowStatus = "LOST"
)

var AllBorrowStatus = []BorrowStatus{
	BorrowStatusBorrowed,
	BorrowStatusReturned,
	BorrowStatusOverdue,
	BorrowStatusLost,
}

func (e BorrowStatus) IsValid() bool {
	switch e {
	case BorrowStatusBorrowed, BorrowStatusReturned, BorrowStatusOverdue, BorrowStatusLost:
		return true
	}
	return false
}

func (e BorrowStatus) String() string {
	return string(e)
}

func (e *BorrowStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BorrowStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BorrowStatus", str)
	}
	return nil
}

func (e BorrowStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleReader    UserRole = "READER"
	UserRoleMember    UserRole = "MEMBER"
	UserRoleLibrarian UserRole = "LIBRARIAN"
	UserRoleAdmin     UserRole = "ADMIN"
)

var AllUserRole = []UserRole{
	UserRoleReader,
	UserRoleMember,
	UserRoleLibrarian,
	UserRoleAdmin,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleReader, UserRoleMember, UserRoleLibrarian, UserRoleAdmin:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
