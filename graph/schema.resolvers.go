package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"bmsgql/database"
	"bmsgql/graph/model"
	"context"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.BookInput) (*model.Book, error) {
	return database.CreateBookInput(input), nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, input model.BookUpdateInput) (*model.Book, error) {
	return database.UpdateBook(id, input), nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (bool, error) {
	err := database.DeleteBook(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.AuthorInput) (*model.Author, error) {
	return database.CreateAuthorInput(input), nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, id string, input model.AuthorUpdateInput) (*model.Author, error) {
	return database.UpdateAuthor(id, input), nil
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, id string) (bool, error) {
	err := database.DeleteAuthor(id)
	if err != nil {
		return false, nil
	}
	return true, nil
}

// CreatePublisher is the resolver for the createPublisher field.
func (r *mutationResolver) CreatePublisher(ctx context.Context, input model.PublisherInput) (*model.Publisher, error) {
	return database.CreatePublisherInput(input), nil
}

// UpdatePublisher is the resolver for the updatePublisher field.
func (r *mutationResolver) UpdatePublisher(ctx context.Context, id string, input model.PublisherUpdateInput) (*model.Publisher, error) {
	return database.UpdatePublisher(id, input), nil
}

// DeletePublisher is the resolver for the deletePublisher field.
func (r *mutationResolver) DeletePublisher(ctx context.Context, id string) (bool, error) {
	err := database.DeletePublisher(id)
	if err != nil {
		return false, nil
	}
	return true, nil
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, username string, email string, password string, fullName *string, role model.UserRole) (*model.User, error) {
	newUser := model.User{
		Username: username,
		Email:    email,
		FullName: fullName,
		Role:     role,
	}
	createdUser := database.CreateUser(newUser, password)
	return createdUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UserUpdateInput) (*model.User, error) {
	return database.UpdateUser(id, input), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	err := database.DeleteUser(id)
	if err != nil {
		return false, nil
	}
	return true, nil
}

// BorrowBook is the resolver for the borrowBook field.
func (r *mutationResolver) BorrowBook(ctx context.Context, bookID string, userID string) (*model.BookBorrow, error) {
	return database.BookBorrow(bookID, userID), nil
}

// UpdateBookBorrow is the resolver for the updateBookBorrow field.
func (r *mutationResolver) UpdateBookBorrow(ctx context.Context, id string, input model.BookBorrowUpdateInput) (*model.BookBorrow, error) {
	return database.UpdateBookBorrow(id, input), nil
}

// ReturnBook is the resolver for the returnBook field.
func (r *mutationResolver) ReturnBook(ctx context.Context, borrowID string) (*model.BookBorrow, error) {
	return database.ReturnBook(borrowID), nil
}

// AddReview is the resolver for the addReview field.
func (r *mutationResolver) AddReview(ctx context.Context, input model.ReviewInput) (*model.Review, error) {
	return database.AddReview(input), nil
}

// UpdateReview is the resolver for the updateReview field.
func (r *mutationResolver) UpdateReview(ctx context.Context, id string, input model.ReviewUpdateInput) (*model.Review, error) {
	return database.UpdateReview(id, input), nil
}

// DeleteReview is the resolver for the deleteReview field.
func (r *mutationResolver) DeleteReview(ctx context.Context, id string) (bool, error) {
	err := database.DeleteReview(id)
	if err != nil {
		return false, nil
	}
	return true, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context, category *model.BookCategory, status *model.BookStatus, minRating *float64, tags []string, limit *int, offset *int) ([]*model.Book, error) {
	return database.GetBooks(), nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	return database.GetBook(id), nil
}

// SearchBooks is the resolver for the searchBooks field.
func (r *queryResolver) SearchBooks(ctx context.Context, query string) ([]*model.Book, error) {
	return database.SearchBooks(query), nil
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context, limit *int, offset *int) ([]*model.Author, error) {
	return database.GetAuthours(), nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, id string) (*model.Author, error) {
	return database.GetAuthour(id), nil
}

// Publishers is the resolver for the publishers field.
func (r *queryResolver) Publishers(ctx context.Context, limit *int, offset *int) ([]*model.Publisher, error) {
	return database.GetPublishers(), nil
}

// Publisher is the resolver for the publisher field.
func (r *queryResolver) Publisher(ctx context.Context, id string) (*model.Publisher, error) {
	return database.GetPublisher(id), nil
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.User, error) {
	// get user from the context
	userId, ok := ctx.Value("userID").(string)
	if !ok {
		return nil, nil
	}

	return database.CurrentUser(userId), nil
}

// UserBorrows is the resolver for the userBorrows field.
func (r *queryResolver) UserBorrows(ctx context.Context, userID string) ([]*model.BookBorrow, error) {
	return database.UserBorrows(userID), nil
}

// OverdueBooks is the resolver for the overdueBooks field.
func (r *queryResolver) OverdueBooks(ctx context.Context) ([]*model.BookBorrow, error) {
	userid, ok := ctx.Value("userID").(string)
	if !ok {
		return nil, nil
	}
	return database.OverdueBooks(userid), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	var database = database.Connect()
*/
