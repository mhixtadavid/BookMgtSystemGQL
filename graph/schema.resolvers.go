package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"bmsgql/books"
	"bmsgql/graph/model"
	"bmsgql/reviews"
	"bmsgql/user"
	"context"
	"fmt"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	return user.Login(email, password)
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignUpInput) (*model.AuthPayload, error) {
	return user.SignUp(input)
}

// RecoverPassword is the resolver for the recoverPassword field.
func (r *mutationResolver) RecoverPassword(ctx context.Context, email string) (bool, error) {
	panic(fmt.Errorf("not implemented: RecoverPassword - recoverPassword"))
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, otp string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: ResetPassword - resetPassword"))
}

// AddBook is the resolver for the addBook field.
func (r *mutationResolver) AddBook(ctx context.Context, input model.AddBookInput) (*model.Book, error) {
	addbook, err := books.AddBook(ctx, input)
	if err != nil {
		return nil, err
	}
	return addbook, nil
}

// EditBook is the resolver for the editBook field.
func (r *mutationResolver) EditBook(ctx context.Context, id string, input model.EditBookInput) (*model.Book, error) {
	editbook, err := books.EditBook(ctx, id, input)
	if err != nil {
		return nil, err
	}
	return editbook, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (bool, error) {
	deletebook, err := books.DeleteBook(ctx, id)
	if err != nil {
		return false, err
	}
	return deletebook, nil
}

// BorrowBook is the resolver for the borrowBook field.
func (r *mutationResolver) BorrowBook(ctx context.Context, bookID string) (*model.BorrowReceipt, error) {
	panic(fmt.Errorf("not implemented: BorrowBook - borrowBook"))
}

// ReserveBook is the resolver for the reserveBook field.
func (r *mutationResolver) ReserveBook(ctx context.Context, bookID string) (*model.ReserveReceipt, error) {
	panic(fmt.Errorf("not implemented: ReserveBook - reserveBook"))
}

// PurchaseBook is the resolver for the purchaseBook field.
func (r *mutationResolver) PurchaseBook(ctx context.Context, bookID string, paymentDetails model.PaymentInput) (*model.PurchaseReceipt, error) {
	panic(fmt.Errorf("not implemented: PurchaseBook - purchaseBook"))
}

// AddBookmark is the resolver for the addBookmark field.
func (r *mutationResolver) AddBookmark(ctx context.Context, bookID string, page int) (*model.Bookmark, error) {
	panic(fmt.Errorf("not implemented: AddBookmark - addBookmark"))
}

// AddReview is the resolver for the addReview field.
func (r *mutationResolver) AddReview(ctx context.Context, bookID string, input model.ReviewInput) (*model.Review, error) {
	addreview, err := reviews.AddReview(ctx, bookID, input)
	if err != nil {
		return nil, err
	}
	return addreview, nil
}

// EditReview is the resolver for the editReview field.
func (r *mutationResolver) EditReview(ctx context.Context, reviewID string, input model.ReviewInput) (*model.Review, error) {
	panic(fmt.Errorf("not implemented: EditReview - editReview"))
}

// DeleteReview is the resolver for the deleteReview field.
func (r *mutationResolver) DeleteReview(ctx context.Context, reviewID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteReview - deleteReview"))
}

// CreateDiscussion is the resolver for the createDiscussion field.
func (r *mutationResolver) CreateDiscussion(ctx context.Context, input model.DiscussionInput) (*model.Discussion, error) {
	panic(fmt.Errorf("not implemented: CreateDiscussion - createDiscussion"))
}

// ReplyToDiscussion is the resolver for the replyToDiscussion field.
func (r *mutationResolver) ReplyToDiscussion(ctx context.Context, discussionID string, content string) (*model.Discussion, error) {
	panic(fmt.Errorf("not implemented: ReplyToDiscussion - replyToDiscussion"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (*model.UserProfile, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// UpdateNotificationSettings is the resolver for the updateNotificationSettings field.
func (r *mutationResolver) UpdateNotificationSettings(ctx context.Context, input model.NotificationSettingsInput) (*model.NotificationSettings, error) {
	panic(fmt.Errorf("not implemented: UpdateNotificationSettings - updateNotificationSettings"))
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.User, error) {
	currentuser, err := user.CurrentUser(ctx)
	if err != nil {
		return nil, err
	}
	return currentuser, nil
}

// FeaturedBooks is the resolver for the featuredBooks field.
func (r *queryResolver) FeaturedBooks(ctx context.Context) ([]*model.Book, error) {
	featuredbooks, err := books.FeaturedBooks(ctx)
	if err != nil {
		return nil, err
	}
	return featuredbooks, nil
}

// RecentlyViewedBooks is the resolver for the recentlyViewedBooks field.
func (r *queryResolver) RecentlyViewedBooks(ctx context.Context) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: RecentlyViewedBooks - recentlyViewedBooks"))
}

// SearchBooks is the resolver for the searchBooks field.
func (r *queryResolver) SearchBooks(ctx context.Context, query string) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: SearchBooks - searchBooks"))
}

// BookDetails is the resolver for the bookDetails field.
func (r *queryResolver) BookDetails(ctx context.Context, id string) (*model.Book, error) {
	bookdetails, err := books.BookDetails(ctx, id)
	if err != nil {
		return nil, err
	}
	return bookdetails, nil
}

// MyLibrary is the resolver for the myLibrary field.
func (r *queryResolver) MyLibrary(ctx context.Context) (*model.Library, error) {
	panic(fmt.Errorf("not implemented: MyLibrary - myLibrary"))
}

// BookHistory is the resolver for the bookHistory field.
func (r *queryResolver) BookHistory(ctx context.Context) ([]*model.BookHistory, error) {
	panic(fmt.Errorf("not implemented: BookHistory - bookHistory"))
}

// BookReviews is the resolver for the bookReviews field.
func (r *queryResolver) BookReviews(ctx context.Context, bookID string) ([]*model.Review, error) {
	panic(fmt.Errorf("not implemented: BookReviews - bookReviews"))
}

// CommunityDiscussions is the resolver for the communityDiscussions field.
func (r *queryResolver) CommunityDiscussions(ctx context.Context) ([]*model.Discussion, error) {
	panic(fmt.Errorf("not implemented: CommunityDiscussions - communityDiscussions"))
}

// UserProfile is the resolver for the userProfile field.
func (r *queryResolver) UserProfile(ctx context.Context) (*model.UserProfile, error) {
	panic(fmt.Errorf("not implemented: UserProfile - userProfile"))
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context) ([]*model.Notification, error) {
	panic(fmt.Errorf("not implemented: Notifications - notifications"))
}

// AdminDashboard is the resolver for the adminDashboard field.
func (r *queryResolver) AdminDashboard(ctx context.Context) (*model.AdminDashboard, error) {
	panic(fmt.Errorf("not implemented: AdminDashboard - adminDashboard"))
}

// UserList is the resolver for the userList field.
func (r *queryResolver) UserList(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: UserList - userList"))
}

// Reports is the resolver for the reports field.
func (r *queryResolver) Reports(ctx context.Context, filter *model.ReportFilterInput) ([]*model.Report, error) {
	panic(fmt.Errorf("not implemented: Reports - reports"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
