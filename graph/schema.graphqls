# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# schema.graphqls

# Enums
enum BookCategory {
  FICTION
  NON_FICTION
  SCIENCE_FICTION
  FANTASY
  MYSTERY
  ROMANCE
  THRILLER
  BIOGRAPHY
  HISTORY
  SCIENCE
  SELF_HELP
  CHILDREN
}

enum BookAvailability {
  AVAILABLE
  RESERVED
  BORROWED
  SOLD_OUT
}

enum UserRole {
  READER
  ADMIN
}

type Query {
  # User Authentication
  currentUser: User!

  # Home and Dashboard
  featuredBooks: [Book!]!
  recentlyViewedBooks: [Book!]!
  searchBooks(query: String!): [Book!]!

  # Book Management
  bookDetails(id: ID!): Book!

  # User Library
  myLibrary: Library!
  bookHistory: [BookHistory!]!

  # Social and Community Features
  bookReviews(bookId: ID!): [Review!]!
  communityDiscussions: [Discussion!]!
  userProfile: UserProfile!

  # Notifications
  notifications: [Notification!]!

  # Admin Features (Optional)
  adminDashboard: AdminDashboard!
  userList: [User!]!
  reports(filter: ReportFilterInput): [Report!]!
}

type Mutation {
  # User Authentication
  login(email: String!, password: String!): AuthPayload!
  signUp(input: SignUpInput!): AuthPayload!
  recoverPassword(email: String!): Boolean!
  resetPassword(otp: String!, newPassword: String!): Boolean!

  # Book Management
  addBook(input: AddBookInput!): Book!
  editBook(id: ID!, input: EditBookInput!): Book!
  deleteBook(id: ID!): Boolean!

  # Book Interaction
  borrowBook(bookId: ID!): BorrowReceipt!
  reserveBook(bookId: ID!): ReserveReceipt!
  purchaseBook(bookId: ID!, paymentDetails: PaymentInput!): PurchaseReceipt!
  addBookmark(bookId: ID!, page: Int!): Bookmark!

  # Social and Community Features
  addReview(bookId: ID!, input: ReviewInput!): Review!
  editReview(reviewId: ID!, input: ReviewInput!): Review!
  deleteReview(reviewId: ID!): Boolean!
  createDiscussion(input: DiscussionInput!): Discussion!
  replyToDiscussion(discussionId: ID!, content: String!): Discussion!

  # Settings and Account Management
  updateProfile(input: UpdateProfileInput!): UserProfile!
  changePassword(currentPassword: String!, newPassword: String!): Boolean!
  updateNotificationSettings(input: NotificationSettingsInput!): NotificationSettings!
}

# Types and Inputs

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  favoriteGenres: [BookCategory]
  activityStats: UserActivityStats
  role: UserRole!
}

type UserActivityStats {
  booksBorrowed: Int
  reviewsWritten: Int
}

input SignUpInput {
  name: String!
  email: String!
  password: String!
  favoriteGenres: [BookCategory]
}

type AuthPayload {
  token: String!
  user: User!
}

type Book {
  id: ID!
  title: String!
  author: String!
  category: BookCategory!
  description: String!
  isbn: String!
  coverImage: String!
  availability: BookAvailability!
  rating: Float!
  reviews: [Review]
}

type Library {
  borrowedBooks: [Book]
  reservedBooks: [Book]
  purchasedBooks: [Book]
  favoriteBooks: [Book]
}

type BookHistory {
  book: Book
  borrowedDate: String
  returnedDate: String
}

input AddBookInput {
  title: String!
  author: String!
  category: BookCategory!
  description: String!
  isbn: String!
  coverImage: String!
}

input EditBookInput {
  title: String
  author: String
  category: BookCategory
  description: String
  isbn: String
  coverImage: String
}

type BorrowReceipt {
  book: Book!
  dueDate: String!
}

type ReserveReceipt {
  book: Book!
  reservationDate: String!
}

type PurchaseReceipt {
  book: Book!
  price: Float!
  paymentDetails: PaymentDetails!
}

input PaymentInput {
  method: String!
  cardNumber: String
  expiryDate: String
  cvv: String
}

type PaymentDetails {
  method: String!
  transactionId: String!
}

type Bookmark {
  book: Book!
  page: Int!
}

type Review {
  id: ID!
  user: User!
  book: Book!
  rating: Float!
  content: String
  createdAt: String
}

input ReviewInput {
  rating: Float!
  content: String
}

type Discussion {
  id: ID!
  title: String!
  category: String!
  replies: [DiscussionReply]
  createdAt: String
  createdBy: User!
}

type DiscussionReply {
  id: ID!
  content: String!
  createdAt: String
  createdBy: User!
}

input DiscussionInput {
  title: String!
  category: String!
  content: String!
}

type Notification {
  id: ID!
  type: String!
  message: String!
  createdAt: String
  read: Boolean
}

type NotificationSettings {
  dueDateReminders: Boolean
  newArrivals: Boolean
  communityActivity: Boolean
}

input NotificationSettingsInput {
  dueDateReminders: Boolean
  newArrivals: Boolean
  communityActivity: Boolean
}

type AdminDashboard {
  totalBooks: Int
  totalUsers: Int
  borrowStats: BorrowStats
}

type BorrowStats {
  daily: Int
  weekly: Int
  monthly: Int
}

input ReportFilterInput {
  dateRange: DateRangeInput
  category: BookCategory
  userActivity: String
}

input DateRangeInput {
  startDate: String!
  endDate: String!
}

type Report {
  id: ID!
  title: String!
  generatedAt: String!
  data: String!
}

type Admin {
  id: ID!
  name: String!
  email: String!
}

input AdminInput {
  name: String!
  email: String!
  password: String!
}

type UserProfile {
  user: User!
  favoriteGenres: [BookCategory]
  activityStats: UserActivityStats
}

input UpdateProfileInput {
  name: String
  email: String
  favoriteGenres: [BookCategory]
}
